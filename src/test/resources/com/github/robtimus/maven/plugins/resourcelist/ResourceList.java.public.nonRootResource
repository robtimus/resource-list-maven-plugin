package com.github.robtimus.maven.plugins.resourcelist;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.Generated;

@Generated("resource-list-maven-plugin")
public final class ResourceList {

    private static final String RESOURCE_LIST_RESOURCE = "/subdir/test.resources";

    private static final ResourceList ABSOLUTE = new ResourceList(s -> "/" + s); //$NON-NLS-1$
    private static final ResourceList RELATIVE = new ResourceList(UnaryOperator.identity());

    private final UnaryOperator<String> resourceModifier;

    private ResourceList(UnaryOperator<String> resourceModifier) {
        this.resourceModifier = resourceModifier;
    }

    public static ResourceList absolute() {
        return ABSOLUTE;
    }

    public static ResourceList relative() {
        return RELATIVE;
    }

    public Stream<String> stream() {
        BufferedReader reader = reader();
        return reader.lines()
                .onClose(() -> {
                    try {
                        reader.close();
                    } catch (IOException e) {
                        throw new UncheckedIOException(e);
                    }
                })
                .map(resourceModifier);
    }

    public List<String> list() {
        try (BufferedReader reader = reader()) {
            return reader.lines()
                    .map(resourceModifier)
                    .collect(Collectors.toList());
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    public void forEach(Consumer<? super String> action) {
        Objects.requireNonNull(action);
        try (BufferedReader reader = reader()) {
            reader.lines()
                    .map(resourceModifier)
                    .forEach(action);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    private BufferedReader reader() {
        InputStream inputStream = getClass().getResourceAsStream(RESOURCE_LIST_RESOURCE);
        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
        return new BufferedReader(inputStreamReader);
    }
}
